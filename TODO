# action items:

* bytecode builder
* ir builder
> These two are very codependent partners. Bytecode builder should be usable on its own, but designed to interface with the ir.

* TypeInfo.formatMemory
> Going to need this like, everywhere. So it needs to be quite robust.

* TypeInfo.fromNative
> This should be pretty easy to whip up, just need a comptime function to translate a Zig `Type` to `ir.TypeInfo`.


* machine code builder
* Assembly instruction impls
> I am not in a hurry to get further into these two, because I think that there should be a way to
> get both a codegen for the jit builder and the interpreter assembly from the same basis,
> like was done with the isa markdown, types etc; and I am still mulling over how to approach it:
> * A simple assembler-description language? That'd make like the 5th language in this language lol
> * LLM? Just write the interpreter and have it generate the machine code builder for the bytecode
> * ...?



# long term:

* docs build step needs work; not getting all content
> I think its the generated intermediate files not getting their docs gen'd up, but I didn't look too closely yet.

* meta language
* user-facing language
> The same but also, not ðŸ˜¼

* make mnemonics in isa collapsable + collapsed by default
> Should be trivial to implement when doc gen is further along, but
> this will require having control over the output html. Currently,
> generating github-flavored markdown, it is impossible to link to
> specific mnemonics or instructions, with this design. This is because
> when you collapse a summary element their body elements are *removed*.
> To fix this we'd need to add some js or similar to the html.