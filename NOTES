# action items:

* bytecode builder
* ir builder
> These two are very codependent partners. Bytecode builder should be usable on
> its own, but designed to interface with the ir.

* TypeInfo.formatMemory
> Going to need this like, everywhere. So it needs to be quite robust.

* TypeInfo.fromNative
> This should be pretty easy to whip up, just need a comptime function to
> translate a Zig `Type` to `ir.TypeInfo`.
> * Would be nice if type info could be
> broken out into its own subsystem, and if we could do some amount of comptime
> generation.
> * The first attempt at this failed because of the complex
> interconnection between types and other ir structures.

* machine code builder
* Assembly instruction impls
>   1. make the current "jit" builder in `machine` parametric over
>      whether its emitting code for the jit vs interpreter, take out current instruction-specific stuff
>   2. using this, as part of isa.zig and gen.zig, create a new api that wraps that, presenting instruction-emitter functions
>   3. use this at comptime to generate interpreter asm, use it at runtime to generate jit asm



# long term:

* docs build step needs work; not getting all content
> I think its the generated intermediate files not getting their docs gen'd up,
> but I didn't look too closely yet.

* meta language
* user-facing language
> The same but also, not ðŸ˜¼

* make mnemonics in isa collapsable + collapsed by default
> Should be trivial to implement when doc gen is further along, but this will
> require having control over the output html. Currently, generating
> github-flavored markdown, it is impossible to link to specific mnemonics or
> instructions, with this design. This is because when you collapse a summary
> element their body elements are *removed*. To fix this we'd need to add some
> js or similar to the html.